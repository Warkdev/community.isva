#!/usr/bin/python
# -*- coding: utf-8 -*-
# Copyright 2022 Cédric Servais
# GNU General Public License v3.0+
# (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)

#############################################
#                WARNING                    #
#############################################
#
# This file is auto generated by the resource
#   module builder playbook.
#
# Do not edit this file manually.
#
# Changes to this file will be over written
#   by the resource module builder.
#
# Changes should be made in the model used to
#   generate this file or in the resource module
#   builder template.
#
#############################################

"""
The module file for isva_service_agreements
"""

from __future__ import absolute_import, division, print_function
__metaclass__ = type

ANSIBLE_METADATA = {
    'metadata_version': '1.1',
    'status': ['preview'],
    'supported_by': 'Community'
}

DOCUMENTATION = """
---
module: isva_service_agreements
version_added: 2.12
short_description: 'Manages the acceptance of agreements attributes of ISVA service agreements.'
description: 'Manages the acceptance of agreements attributes of ISVA service agreements'
author: Cédric Servais
notes:
  - 'Tested against ISVA Docker v10.0.3.1'
options:
  config:
    description: The state of the service agreements
    type: dict
    suboptions:
      accepted:
        type: bool
        description: The state of the service agreements
  state:
    description:
    - The state the configuration should be left in
    type: str
    choices:
    - gathered
    - replaced
    default: replaced
"""
EXAMPLES = """
# Using replaced

<placeholder for the configuration example prior to module invocation>

- name: Accept Service Agreements
  isva_service_agreements:
    config:
      accepted: True
    state: gathered

<placeholder for the configuration example after module invocation>


# Using replaced

<placeholder for the configuration example prior to module invocation>

- name: Accept Service Agreements
  isva_service_agreements:
    config:
      accepted: True
    state: replaced

<placeholder for the configuration example after module invocation>


"""
RETURN = """
before:
  description: The configuration prior to the model invocation.
  returned: always
  sample: >
    The configuration returned will always be in the same format
     of the parameters above.
after:
  description: The resulting configuration model invocation.
  returned: when changed
  sample: >
    The configuration returned will always be in the same format
     of the parameters above.
commands:
  description: The set of commands pushed to the remote device.
  returned: always
  type: list
  sample: ['command 1', 'command 2', 'command 3']
"""


from ansible.module_utils.basic import AnsibleModule
from ansible_collections.community.isva.plugins.module_utils.network.isva.argspec.service_agreements.service_agreements import Service_agreementsArgs
from ansible_collections.community.isva.plugins.module_utils.network.isva.config.service_agreements.service_agreements import Service_agreements


def main():
    """
    Main entry point for module execution

    :returns: the result form module invocation
    """
    module = AnsibleModule(argument_spec=Service_agreementsArgs.argument_spec,
                           supports_check_mode=True)

    result = Service_agreements(module).execute_module()
    module.exit_json(**result)


if __name__ == '__main__':
    main()
